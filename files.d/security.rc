#!/bin/bash

encrypt-file() {
    local fname="$1"
    local output="$2"
    openssl enc -aes-256-cbc -salt -pbkdf2 -out $output -in $fname
}

decrypt-file() {
    local fname="$1"
    local output="$2"
    openssl enc -aes-256-cbc -pbkdf2 -d -in $fname -out $output
}

encfile() {
    local fname="$1"
    local fname_base=$(basename $fname)
    local output=$fname.enc
    mkdir -p /tmp/cred
    local tempfile=/tmp/cred/$fname_base.enc

    #local perms=$(stat -c %a "$fname")
    local metadata=$(metadata-backup "$fname")

    encrypt-file $fname $tempfile
    decrypt-file $tempfile /tmp/cred/tmp
    # todo: fix absolute/relative paths... now is happy path, which cwd.
    if diff "/tmp/cred/tmp" "$fname" >/dev/null; then
        mv $tempfile $output
        rm -f $fname /tmp/cred/tmp
        #chmod "$perms" "$output"
        metadata-restore "$output" "$metadata"
        log_info "encrypted $fname -> $output"
    else
        log_error "files do not match, aborting..."
        rm -f $tempfile $/tmp/cred/tmp
    fi
}

decfile() {
    local fname="$1"
    local output="${fname%.enc}"
    #local perms=$(stat -c %a "$fname")
    local metadata=$(metadata-backup "$fname")
    decrypt-file "$fname" "$output"
    #chmod "$perms" "$output"
    metadata-restore "$fname" "$metadata"
    log_info "decrypted $fname -> $output"
}

# credentials
github-access-token() {
    local github_access_token="$CREDENTIALS_DIR/github-access-token"
    decrypt-file "$github_access_token.enc" "/tmp/github.dec"
    cat "/tmp/github.dec"
    rm -f "/tmp/github.dec" > /dev/null 2>&1
}

view-cred() {
    local printer
    if [ "$1" = "--cat" ]; then
        printer="cat"
    elif [ "$2" = "--cat" ]; then
        printer="cat"
    else
        printer="less"
    fi

    local file="$1"
    local decrypted_file="/tmp/file.dec"
    decrypt-file "$file" "$decrypted_file"
    $printer "$decrypted_file"
    rm -f "$decrypted_file" > /dev/null 2>&1
}

2fa-backup-code() {
    local credfile="$CREDENTIALS_DIR/2fa-backup-codes.json"
    local tempfile=$(mktemp)
    decrypt-file "$credfile.enc" "$tempfile"

    local arg="$1"
    local result
    if [ -n "$1" ]; then
        arg=$(python3 -c "print('$arg'.capitalize())")
        local pycmd="import json\n"
        local filtered=$(cat "$tempfile" | jq ".$arg")
        pycmd+="d = $filtered\n"
        pycmd+="print(json.dumps(d[max([k for k in d.keys() if k.startswith('202')])], indent=2))"
        local pytemp=$(mktemp)
        echo "$pycmd" > "$pytemp"
        result=$(python3 "$pytemp")
        rm -f "$pytemp" "$tempfile" > /dev/null 2>&1
    else
        local pycmd="import json\n"
        local filtered=$(cat "$tempfile" | jq)
        pycmd+="d = $filtered\n"
        pycmd+="n = dict()\n"
        pycmd+="for k, v in d.items():\n"
        pycmd+="\tn[k] = v[max([k for k in v.keys() if k.startswith('202')])]\n"
        pycmd+="print(json.dumps(n, indent=2))"
        local pytemp=$(mktemp)
        echo "$pycmd" > "$pytemp"
        result=$(python3 "$pytemp")
        rm -f "$pytemp" "$tempfile" > /dev/null 2>&1
    fi
    echo "$result" | less
}
